// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered fraud transaction detection.
 *
 * - flagFraudulentTransactions - Analyzes recent transactions to detect and flag unusual activity.
 * - FlagFraudulentTransactionsInput - The input type for the flagFraudulentTransactions function.
 * - FlagFraudulentTransactionsOutput - The return type for the flagFraudulentTransactions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TransactionSchema = z.object({
  transactionId: z.string().describe('Unique identifier for the transaction.'),
  accountId: z.string().describe('Account ID associated with the transaction.'),
  timestamp: z.string().describe('Timestamp of the transaction (ISO format).'),
  amount: z.number().describe('Transaction amount.'),
  description: z.string().describe('Description of the transaction.'),
});

const FlagFraudulentTransactionsInputSchema = z.object({
  transactions: z.array(TransactionSchema).describe('Array of recent transactions.'),
});
export type FlagFraudulentTransactionsInput = z.infer<
  typeof FlagFraudulentTransactionsInputSchema
>;

const FlagFraudulentTransactionsOutputSchema = z.object({
  flaggedTransactions: z
    .array(z.string())
    .describe('Array of transaction IDs flagged as potentially fraudulent.'),
  explanation: z.string().describe('Explanation of why these transactions were flagged.'),
});
export type FlagFraudulentTransactionsOutput = z.infer<
  typeof FlagFraudulentTransactionsOutputSchema
>;

export async function flagFraudulentTransactions(
  input: FlagFraudulentTransactionsInput
): Promise<FlagFraudulentTransactionsOutput> {
  return flagFraudulentTransactionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'flagFraudulentTransactionsPrompt',
  input: {
    schema: FlagFraudulentTransactionsInputSchema,
  },
  output: {
    schema: FlagFraudulentTransactionsOutputSchema,
  },
  prompt: `You are a fraud detection expert analyzing banking transactions.

  Analyze the following recent transactions and identify any that are potentially fraudulent.
  Return the transaction IDs of any flagged transactions and an explanation of why they were flagged.

  Transactions:
  {{#each transactions}}
  Transaction ID: {{{transactionId}}}
  Account ID: {{{accountId}}}
  Timestamp: {{{timestamp}}}
  Amount: {{{amount}}}
  Description: {{{description}}}
  {{/each}}

  If no transactions are fraudulent, return an empty array for flaggedTransactions.
`,
});

const flagFraudulentTransactionsFlow = ai.defineFlow(
  {
    name: 'flagFraudulentTransactionsFlow',
    inputSchema: FlagFraudulentTransactionsInputSchema,
    outputSchema: FlagFraudulentTransactionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
