
rules_version = '2';

/**
 * This is a complete and secure set of Firestore rules for an application
 * with user accounts, transactions, and notifications.
 *
 * It is built on a strict ownership model: users can only access data
 * directly associated with their unique user ID (UID).
 */
service cloud.firestore {
  match /databases/{database}/documents {

    /**************************************************************
     *                                                            *
     *                      HELPER FUNCTIONS                      *
     *                                                            *
     **************************************************************/

    /**
     * Checks if a user is authenticated.
     * `request.auth` is null if the user is not signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * Checks if the currently authenticated user is the owner of a document.
     * This is the primary function for enforcing user-specific access.
     * @param userId The UID of the user to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }


    /**************************************************************
     *                                                            *
     *                   COLLECTION: `accounts`                   *
     *                                                            *
     **************************************************************/

    /**
     * Rules for user account documents, where the document ID `{userId}`
     * is expected to be the user's Firebase UID.
     */
    match /accounts/{userId} {

      // A user can read, create, update, or delete THEIR OWN account document.
      // `allow write` is a shorthand for `create`, `update`, and `delete`.
      allow read, write: if isSignedIn() && isOwner(userId);

      // Any signed-in user is allowed to query the `accounts` collection.
      // This is often needed to search for other users (e.g., to send money).
      // IMPORTANT: For privacy, ensure your client-side query only requests
      // public fields (like `displayName` or `email`), not sensitive data.
      allow list: if isSignedIn();
    }


    /**************************************************************
     *                                                            *
     *                 COLLECTION: `transactions`                 *
     *                                                            *
     **************************************************************/

    /**
     * Rules for transaction documents. Each document MUST contain an `accountId`
     * field that stores the UID of the user who owns the transaction.
     */
    match /transactions/{transactionId} {

      // READ: A user can read a single transaction document only if the `accountId`
      // field inside that document matches their own UID.
      allow get: if isSignedIn() && isOwner(resource.data.accountId);

      // QUERY: A user can list transactions ONLY IF the query explicitly filters
      // for their own `accountId`. This is a critical security rule.
      // Your client code MUST use: `query(collection(db, "transactions"), where("accountId", "==", user.uid))`
      allow list: if isSignedIn() && isOwner(request.query.where.accountId);

      // CREATE: A user can create a new transaction document only if they set the
      // `accountId` field in the new document to their own UID.
      // `request.resource.data` refers to the data of the document being created.
      allow create: if isSignedIn() && isOwner(request.resource.data.accountId);

      // DENY UPDATES AND DELETES: To maintain a secure and reliable audit trail,
      // transactions should be immutable. They cannot be changed or deleted once created.
      allow update, delete: if false;
    }


    /**************************************************************
     *                                                            *
     *                COLLECTION: `notifications`                 *
     *                                                            *
     **************************************************************/

    /**
     * Rules for notification documents. Each document MUST contain a `userId`
     * field that stores the UID of the user who should receive the notification.
     */
    match /notifications/{notificationId} {

      // READ: A user can read a single notification only if the `userId` field
      // inside that document matches their own UID.
      allow get: if isSignedIn() && isOwner(resource.data.userId);

      // QUERY: A user can list notifications ONLY IF the query explicitly filters
      // for their own `userId`.
      // Your client code MUST use: `query(collection(db, "notifications"), where("userId", "==", user.uid))`
      allow list: if isSignedIn() && isOwner(request.query.where.userId);

      // CREATE: Any authenticated user can create a notification. This allows your
      // backend (like Cloud Functions) or other users to send notifications.
      // The logic for setting the correct recipient `userId` is handled in your app/backend code.
      allow create: if isSignedIn();

      // UPDATE: A user can update their own notification (e.g., to mark it as read).
      // This rule checks the `userId` of the document *before* the update to ensure ownership.
      allow update: if isSignedIn() && isOwner(resource.data.userId);

      // DELETE: A user can delete their own notifications.
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}
