rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'accounts' collection
    match /accounts/{userId} {
      // Allow read and write access only for the document owner
      allow read, write: if isAuthenticated() && isOwner(userId);

      // Allow any authenticated user to list documents for transfers,
      // but only if they are querying by holderName (email).
      allow list: if isAuthenticated();
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
      // Allow a user to read a transaction if they are the owner.
      // Allow a user to create a transaction for themselves or others (for transfers).
      allow read: if isAuthenticated() && request.auth.uid == resource.data.accountId;
      allow create: if isAuthenticated();

      // Explicitly allow list operations (queries) only if the user is querying
      // for their own transactions. This is the key fix.
      allow list: if isAuthenticated() && request.query.where.accountId == request.auth.uid;
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
        // Allow a user to read/update a notification if they are the owner.
        // Allow anyone to create a notification (e.g. system sending to user).
        allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated();

        // Explicitly allow list operations (queries) only if the user is querying
        // for their own notifications. This is the key fix.
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
  }
}
