rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // accounts collection: A user can read/write their own account.
    // Any signed-in user can query the collection to find other users for transfers.
    match /accounts/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn();
    }

    // transactions collection: A user can only access their own transactions.
    match /transactions/{transactionId} {
      // Allow reading a single transaction if the user is the owner.
      allow get: if isSignedIn() && request.auth.uid == resource.data.accountId;

      // Allow listing transactions ONLY when the query filters by the user's own ID.
      // This is the critical rule for allowing the transaction history to load.
      allow list: if isSignedIn() && request.query.where.accountId == request.auth.uid;

      // Allow creating a transaction if the user is setting themselves as the owner.
      allow create: if isSignedIn() && request.resource.data.accountId == request.auth.uid;
      
      // Deny updates and deletes to maintain an immutable ledger.
      allow update, delete: if false;
    }

    // notifications collection: A user can only access their own notifications.
    match /notifications/{notificationId} {
      // Allow reading a single notification if the user is the owner.
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;

      // Allow listing notifications ONLY when the query filters by the user's own ID.
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      
      // Allow creating notifications for other users (e.g., for transfers).
      allow create: if isSignedIn();
      
      // Allow updating/deleting one's own notifications (e.g., mark as read).
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}