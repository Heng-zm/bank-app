
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'accounts' collection
    match /accounts/{userId} {
      // Allow a user to read their own account data.
      // Allow any authenticated user to read account data for transfers.
      allow read: if isAuthenticated();

      // Allow a user to create their own account document upon signup.
      allow create: if isOwner(userId);
      
      // Only allow a user to update their own account.
      // The transaction logic in the backend handles balance updates securely.
      allow update: if isOwner(userId);

      // Users should not be able to delete their accounts directly through the client.
      allow delete: if false;
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
      // A user can create a transaction if the transaction's accountId matches their own UID.
      allow create: if isAuthenticated() && isOwner(request.resource.data.accountId);

      // A user can only read (get or list) transactions belonging to them.
      allow read: if isAuthenticated() && isOwner(resource.data.accountId);

      // Transactions should be immutable to prevent tampering.
      allow update, delete: if false;
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
        // A user can only read notifications intended for them.
        allow read: if isAuthenticated() && isOwner(resource.data.userId);

        // A user can mark their own notifications as read.
        allow update: if isAuthenticated() && isOwner(resource.data.userId);
        
        // Notifications can be created by backend logic (e.g., in a transaction).
        // For client-side creation (like the "Announce Feature" button),
        // ensure the user is creating a notification for themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);

        // Users should not be able to delete notifications.
        allow delete: if false;
    }
  }
}
